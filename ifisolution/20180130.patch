### Eclipse Workspace Patch 1.0
#P addon-apis
Index: launches/Apis - Generate Documentation.launch
===================================================================
RCS file: /home/cvs/addon-apis/launches/Apis - Generate Documentation.launch,v
retrieving revision 1.3
diff -u -r1.3 Apis - Generate Documentation.launch
--- launches/Apis - Generate Documentation.launch	8 Sep 2016 06:32:38 -0000	1.3
+++ launches/Apis - Generate Documentation.launch	30 Jan 2018 11:23:46 -0000
@@ -15,7 +15,7 @@
 <stringAttribute key="org.eclipse.debug.ui.target_debug_perspective" value="perspective_default"/>
 <stringAttribute key="org.eclipse.debug.ui.target_run_perspective" value="perspective_default"/>
 <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jdk1.8.0_71"/>
+<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jdk1.8.0_91"/>
 <stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ant.internal.launching.remote.InternalAntRunner"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="addon-apis"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/addon-apis/ant/buildDocumentation.xml}"/>
Index: launches/Apis - Generate Messages.launch
===================================================================
RCS file: /home/cvs/addon-apis/launches/Apis - Generate Messages.launch,v
retrieving revision 1.2
diff -u -r1.2 Apis - Generate Messages.launch
--- launches/Apis - Generate Messages.launch	27 Aug 2015 08:28:24 -0000	1.2
+++ launches/Apis - Generate Messages.launch	30 Jan 2018 11:23:46 -0000
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="org.eclipse.ant.ui.ATTR_BUILD_SCOPE" value="${none}"/>
-<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="true"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
 <listEntry value="/addon-apis/ant/generateMessages.xml"/>
 </listAttribute>
@@ -15,7 +15,7 @@
 <stringAttribute key="org.eclipse.debug.ui.target_debug_perspective" value="perspective_default"/>
 <stringAttribute key="org.eclipse.debug.ui.target_run_perspective" value="perspective_default"/>
 <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jdk1.8.0_91"/>
 <stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ant.internal.launching.remote.InternalAntRunner"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="addon-apis"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/addon-apis/ant/generateMessages.xml}"/>
Index: launches/Apis Update addons bundle.launch
===================================================================
RCS file: /home/cvs/addon-apis/launches/Apis Update addons bundle.launch,v
retrieving revision 1.1
diff -u -r1.1 Apis Update addons bundle.launch
--- launches/Apis Update addons bundle.launch	26 Nov 2015 03:19:29 -0000	1.1
+++ launches/Apis Update addons bundle.launch	30 Jan 2018 11:23:46 -0000
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
-<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="true"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
 <listEntry value="/addon-apis/ant/updateAddons.xml"/>
 </listAttribute>
@@ -9,7 +9,7 @@
 </listAttribute>
 <stringAttribute key="org.eclipse.debug.ui.ATTR_CONSOLE_ENCODING" value="UTF-8"/>
 <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jdk1.8.0_91"/>
 <stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ant.internal.launching.remote.InternalAntRunner"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="addon-apis"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
Index: src-tests/test/TestImportFreeFormCaseService.java
===================================================================
RCS file: src-tests/test/TestImportFreeFormCaseService.java
diff -N src-tests/test/TestImportFreeFormCaseService.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src-tests/test/TestImportFreeFormCaseService.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,616 @@
+/*
+ * Copyright Orchestra Networks 2000-2012. All rights reserved.
+ */
+package test;
+
+import java.io.*;
+import java.util.*;
+
+import com.onwbp.adaptation.*;
+import com.onwbp.base.text.*;
+import com.orchestranetworks.addon.apis.bean.*;
+import com.orchestranetworks.addon.apis.binding.*;
+import com.orchestranetworks.addon.apis.common.*;
+import com.orchestranetworks.addon.apis.enumeration.*;
+import com.orchestranetworks.addon.apis.i18n.*;
+import com.orchestranetworks.addon.apis.userservice.importtest.*;
+import com.orchestranetworks.addon.apis.userservice.importtest.importtestcase.*;
+import com.orchestranetworks.service.*;
+
+import common.*;
+import test.report.annotations.*;
+
+/**
+ */
+public final class TestImportFreeFormCaseService extends ApisTestCase
+{
+	@Evolution(Ids = "#29081")
+	public void testImportFreeFormCase() throws ApisException
+	{
+		File sourceFile = new File("./src-tests/resources/archives/ImportTestCaseTemplate.xls");
+		ImportSpreadsheetServiceContext serviceContext = new ImportSpreadsheetServiceContext();
+		serviceContext.setImportSpreadsheetSpec(
+			new ImportSpreadsheetSpec(ImportMode.INSERT_OR_UPDATE, sourceFile));
+		serviceContext.setEntitySelection(new DataSetEntitySelectionImpl(this.apisDataset));
+		ImportSpreadsheetProcedure importTestCaseProcedure = new ImportTestCaseProcedure(
+			serviceContext);
+		ProgrammaticService ps = ProgrammaticService
+			.createForSession(this.session, this.apisDataset.getHome());
+		ps.execute(importTestCaseProcedure);
+		int result = serviceContext.getResult().getNumberOfCreatedRecord(
+			this.apisDataset.getTable(
+				ApisPaths._Apis_TestDriving_TestConfiguration_CampaignDefinition
+					.getPathInSchema()));
+		//check result correct and check creation input output context
+		assertEquals(0, result);
+		result = serviceContext.getResult().getNumberOfCreatedRecord(
+			this.apisDataset.getTable(
+				ApisPaths._Apis_TestDriving_TestConfiguration_Scenario.getPathInSchema()));
+		assertEquals(5, result);
+		//@Reproduce(Issues = "#21938")
+		result = serviceContext.getResult().getNumberOfCreatedRecord(
+			this.apisDataset
+				.getTable(ApisPaths._Apis_TestDriving_TestConfiguration_Step.getPathInSchema()));
+		assertEquals(12, result);
+		//@Reproduce(Issues = "#21594")
+		result = serviceContext.getResult().getNumberOfCreatedRecord(
+			this.apisDataset.getTable(
+				ApisPaths._Apis_TestDriving_TestConfiguration_ScenarioUsesOrderStep
+					.getPathInSchema()));
+		assertEquals(12, result);
+		result = serviceContext.getResult().getNumberOfCreatedRecord(
+			this.apisDataset.getTable(
+				ApisPaths._Apis_TestDriving_TestConfiguration_CampaignDefinitionIncludesOrderScenario
+					.getPathInSchema()));
+		assertEquals(3, result);
+		//@Reproduce(Issues = "#21999");
+		result = serviceContext.getResult().getNumberOfCreatedRecord(
+			this.apisDataset
+				.getTable(ApisPaths._Apis_TestDriving_TestData_InputOutputData.getPathInSchema()));
+		assertEquals(0, result);
+
+		//for update
+		result = serviceContext.getResult().getNumberOfUpdatedRecord(
+			this.apisDataset.getTable(
+				ApisPaths._Apis_TestDriving_TestConfiguration_CampaignDefinition
+					.getPathInSchema()));
+		assertEquals(1, result);
+		//@Reproduce(Issues = "##21933")
+		result = serviceContext.getResult().getNumberOfUpdatedRecord(
+			this.apisDataset.getTable(
+				ApisPaths._Apis_TestDriving_TestConfiguration_Scenario.getPathInSchema()));
+		assertEquals(1, result);
+		//@Reproduce(Issues = "#21938")
+		result = serviceContext.getResult().getNumberOfUpdatedRecord(
+			this.apisDataset
+				.getTable(ApisPaths._Apis_TestDriving_TestConfiguration_Step.getPathInSchema()));
+		assertEquals(1, result);
+		result = serviceContext.getResult().getNumberOfUpdatedRecord(
+			this.apisDataset.getTable(
+				ApisPaths._Apis_TestDriving_TestConfiguration_ScenarioUsesOrderStep
+					.getPathInSchema()));
+		assertEquals(0, result);
+		//@Reproduce(Issues = "#21596");
+		result = serviceContext.getResult().getNumberOfUpdatedRecord(
+			this.apisDataset.getTable(
+				ApisPaths._Apis_TestDriving_TestData_InputOutputContext.getPathInSchema()));
+		assertEquals(1, result);
+		//@Reproduce(Issues = "#21999");
+		result = serviceContext.getResult().getNumberOfUpdatedRecord(
+			this.apisDataset
+				.getTable(ApisPaths._Apis_TestDriving_TestData_InputOutputData.getPathInSchema()));
+		assertEquals(0, result);
+
+		Map<SheetName, Map<Integer, RowIssues>> rowIssues = serviceContext.getResult()
+			.getRowIssues();
+		Collection<RowIssues> campaignRowIssues = rowIssues.get(SheetName.CAMPAIGN).values();
+		boolean prefixCampaign = false;
+		boolean campaignCode = false;
+		boolean campaignCodeInScenario = false;
+		boolean scenarioCode = false;
+		boolean scenarioCodeInStep = false;
+		boolean stepCode = false;
+		boolean keyIoContext = false;
+		boolean referenceDataspace = false;
+		boolean referenceDataset = false;
+		boolean isRefUserCompatibleType = false;
+		boolean isMainFeatureCompatibleType = false;
+		boolean isSecondaryFeatureCompatibleType = false;
+		boolean isMantisIdentifierCompatibleType = false;
+		boolean isReferDataspaceExistInScenario = false;
+		boolean isReferDatasetExistInScenario = false;
+		boolean isReferTableExist = false;
+		boolean isValidRecord = true;
+		boolean isInitialDatabaseCorrect = false;
+		boolean isInputDataCorrect = true;
+		boolean isScenarioCreated = false;
+		boolean isCreateOrUpdate = false;
+		boolean isMessageForIoDataOrderOrInputData = false;
+		boolean isValidOnVersionScenario = false;
+		boolean isValidOnVersionStep = false;
+		boolean isDuplicateValidOnVersionScenario = false;
+		boolean isDuplicateOnVersionStep = false;
+
+		String refeDataspace = "A";
+		String refeDataset = "B";
+
+		assertEquals(5, campaignRowIssues.size());
+		for (RowIssues campaignRow : campaignRowIssues)
+		{
+			if (this.checkValid(
+				campaignRow,
+				3,
+				"Code",
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty()))
+			{
+				campaignCode = true;
+			}
+			if (this.checkValid(
+				campaignRow,
+				4,
+				"Code",
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Campaign_Prefix()))
+			{
+				prefixCampaign = true;
+			}
+			//check reference data space and reference data set
+			if (this.checkValid(
+				campaignRow,
+				5,
+				"Reference data space",
+				ApisErrorMessages
+					.get_Message_Error_Import_Test_Case_Not_Found_Dataspace(refeDataspace)))
+			{
+				referenceDataspace = true;
+			}
+			if (this.checkValid(
+				campaignRow,
+				6,
+				"Reference data set",
+				ApisErrorMessages
+					.get_Message_Error_Import_Test_Case_Not_Found_Dataset(refeDataset)))
+			{
+				referenceDataset = true;
+			}
+			//@Reproduce(Issues = "#21927")
+			if (this.checkValid(
+				campaignRow,
+				7,
+				"Initial database",
+				ApisErrorMessages.get_Message_Error_Import_Test_Case_Type_Format_Is_Not_Correct()))
+			{
+				isInitialDatabaseCorrect = true;
+			}
+		}
+		Collection<RowIssues> scenarioRowIssues = rowIssues.get(SheetName.SCENARIO).values();
+		assertEquals(11, scenarioRowIssues.size());
+		for (RowIssues scenarioCaseRow : scenarioRowIssues)
+		{
+			//@Evolution(Ids = "#26222")
+			if (this.checkValid(
+				scenarioCaseRow,
+				4,
+				"Valid on version",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isValidOnVersionScenario = true;
+			}
+			if (this.checkValid(
+				scenarioCaseRow,
+				6,
+				"Campaign code",
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty()))
+			{
+				campaignCodeInScenario = true;
+			}
+			if (this.checkValid(
+				scenarioCaseRow,
+				5,
+				"Scenario code",
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty()))
+			{
+				scenarioCode = true;
+			}
+			//@Reproduce(Issues = "#21730, #21960")
+			if (this.checkValid(
+				scenarioCaseRow,
+				8,
+				"Ref user profile",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isRefUserCompatibleType = true;
+			}
+			if (this.checkValid(
+				scenarioCaseRow,
+				9,
+				"Main feature",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isMainFeatureCompatibleType = true;
+			}
+			if (this.checkValid(
+				scenarioCaseRow,
+				14,
+				"Secondary feature",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isSecondaryFeatureCompatibleType = true;
+			}
+			//@Reproduce(Issues = "#21928")
+			if (this.checkValid(
+				scenarioCaseRow,
+				11,
+				"Mantis identifier",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isMantisIdentifierCompatibleType = true;
+			}
+			if (this.checkValid(
+				scenarioCaseRow,
+				12,
+				"Reference data space",
+				ApisErrorMessages.get_Message_Error_Import_Test_Case_Not_Found_Dataspace("a")))
+			{
+				isReferDataspaceExistInScenario = true;
+			}
+			if (this.checkValid(
+				scenarioCaseRow,
+				13,
+				"Reference data set",
+				ApisErrorMessages.get_Message_Error_Import_Test_Case_Not_Found_Dataset("a")))
+			{
+				isReferDatasetExistInScenario = true;
+			}
+			if (this.checkValid(
+				scenarioCaseRow,
+				15,
+				"Valid on version",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isDuplicateValidOnVersionScenario = true;
+			}
+		}
+		Collection<RowIssues> stepRowIssues = rowIssues.get(SheetName.STEP).values();
+		assertEquals(4, stepRowIssues.size());
+		for (RowIssues stepCaseRow : stepRowIssues)
+		{
+			if (this.checkValid(
+				stepCaseRow,
+				14,
+				"Scenario code",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Scenario_Not_Exit()))
+			{
+				scenarioCodeInStep = true;
+			}
+			if (this.checkValid(
+				stepCaseRow,
+				15,
+				"Code",
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty()))
+			{
+				stepCode = true;
+			}
+
+			if (this.checkValid(
+				stepCaseRow,
+				16,
+				"Valid on version",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isValidOnVersionStep = true;
+			}
+
+			if (this.checkValid(
+				stepCaseRow,
+				17,
+				"Valid on version",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isDuplicateOnVersionStep = true;
+			}
+
+		}
+		Collection<RowIssues> ioContextRowIssues = rowIssues.get(SheetName.IO_CONTEXT).values();
+		assertEquals(12, ioContextRowIssues.size());
+		for (RowIssues ioContextCaseRow : ioContextRowIssues)
+		{
+			if (this.checkValid(
+				ioContextCaseRow,
+				6,
+				ImportSheetHandler.CAMPAIGN_OR_SCENARIO_OR_STEP,
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Does_Not_Have_Relation()))
+			{
+				keyIoContext = true;
+			}
+		}
+		//@Reproduce(Issues = "#21835, #21706, #21724")
+		Collection<RowIssues> ioDataRowIssues = rowIssues.get(SheetName.IO_DATA).values();
+		int i = 0;
+		assertEquals(8, ioDataRowIssues.size());
+		for (RowIssues ioDataCaseRow : ioDataRowIssues)
+		{
+			i++;
+			if (this.checkValid(
+				ioDataCaseRow,
+				3,
+				"Table",
+				ApisErrorMessages.get_Message_Error_Import_Test_Case_Not_Found_Table()))
+			{
+				isReferTableExist = true;
+			}
+			//@Reproduce(Issues = "#23525")
+			if (this.checkValid(
+				ioDataCaseRow,
+				9,
+				"Record",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isValidRecord = false;
+			}
+			if ("Input data".equals(ioDataCaseRow.getColName()) && (i == 3))
+			{
+				isInputDataCorrect = false;
+			}
+			//@Reproduce(Issues = "#21934")
+			if (this.checkValid(
+				ioDataCaseRow,
+				4,
+				"Order",
+				ApisErrorMessages
+					.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible())
+				|| this.checkValid(
+					ioDataCaseRow,
+					8,
+					"Input Data",
+					ApisErrorMessages
+						.get_Test_Configuration_Import_Testcase_Design_Input_Not_Compatible()))
+			{
+				isMessageForIoDataOrderOrInputData = true;
+			}
+		}
+		//@Evolution(Ids ="#29552")
+		assertTrue(isDuplicateValidOnVersionScenario);
+		assertTrue(isDuplicateOnVersionStep);
+		//@Evolution(Ids ="#26222")
+		assertTrue(isValidOnVersionScenario);
+		assertTrue(isValidOnVersionStep);
+		//@Reproduce(Issues = "#23525")
+		assertTrue(isValidRecord);
+		//@Reproduce(Issues = "#21934")
+		assertFalse(isMessageForIoDataOrderOrInputData);
+		//@Evolution(Ids = "#21835")
+		assertTrue(isReferTableExist);
+		//@Reproduce(Issues = "#21730")
+		assertTrue(isRefUserCompatibleType);
+		//@Reproduce(Issues = "#21682")
+		assertTrue(referenceDataset);
+		//@Reproduce(Issues = "#21682")
+		//correcting
+		assertTrue(referenceDataspace);
+		assertTrue(prefixCampaign);
+		assertTrue(campaignCode);
+		assertTrue(campaignCodeInScenario);
+		assertTrue(scenarioCode);
+		assertTrue(scenarioCodeInStep);
+		assertTrue(stepCode);
+		assertTrue(keyIoContext);
+		//@Reproduce(Issues = "#21960")
+		assertTrue(isRefUserCompatibleType);
+		assertTrue(isMainFeatureCompatibleType);
+		assertTrue(isSecondaryFeatureCompatibleType);
+		assertTrue(isReferDataspaceExistInScenario);
+		assertTrue(isReferDatasetExistInScenario);
+		//@Reproduce(Issues = "#21927")
+		assertTrue(isInitialDatabaseCorrect);
+		//@Reproduce(Issues = "#21928")
+		assertTrue(isMantisIdentifierCompatibleType);
+		//@Reproduce(Issues = "#21974")
+		assertTrue(isInputDataCorrect);
+		//check date field of campaign definition and scenario
+		//@Reproduce(Issues = "#21576")
+		Calendar expectDate = Calendar.getInstance();
+		expectDate.set(Calendar.MINUTE, 0);
+		expectDate.set(Calendar.HOUR_OF_DAY, 0);
+		expectDate.set(Calendar.SECOND, 0);
+		expectDate.set(Calendar.MILLISECOND, 0);
+		AdaptationTable campaignTable = this.apisDataset.getTable(
+			ApisPaths._Apis_TestDriving_TestConfiguration_CampaignDefinition.getPathInSchema());
+		String GET_CAMPAIGN_KEY_FROM_CODE = ApisPaths._Apis_TestDriving_TestConfiguration_CampaignDefinition._Code
+			.format() + " = {0}";
+		String requestCampaign = ApisRequestManager
+			.getRequest(GET_CAMPAIGN_KEY_FROM_CODE, "CP-Addon-Apis");
+		RequestResult campaignResults = campaignTable.createRequestResult(requestCampaign);
+		Adaptation campaignResult;
+		try
+		{
+			if ((campaignResult = campaignResults.nextAdaptation()) != null)
+			{
+				Date creatDate = campaignResult.getDate(
+					ApisPaths._Apis_TestDriving_TestConfiguration_CampaignDefinition._Time);
+				assertEquals(1, expectDate.getTime().compareTo(creatDate));
+			}
+		}
+		finally
+		{
+			campaignResults.close();
+		}
+		AdaptationTable scenarioTable = this.apisDataset
+			.getTable(ApisPaths._Apis_TestDriving_TestConfiguration_Scenario.getPathInSchema());
+		//@Reproduce(Issues = "#21593")
+		// check date field of campaign definition and scenario when campain or scenario is created
+
+		String requestNewCampaign = ApisRequestManager
+			.getRequest(GET_CAMPAIGN_KEY_FROM_CODE, "CPNew1");
+		RequestResult campaignNewResults = campaignTable.createRequestResult(requestNewCampaign);
+		Adaptation campaignNewResult;
+		try
+		{
+			if ((campaignNewResult = campaignNewResults.nextAdaptation()) != null)
+			{
+				Date creatDate = campaignNewResult.getDate(
+					ApisPaths._Apis_TestDriving_TestConfiguration_CampaignDefinition._Time);
+				assertNotNull(creatDate);
+			}
+		}
+		finally
+		{
+			campaignNewResults.close();
+		}
+		String GET_SCENARIO_KEY_FROM_CODE = ApisPaths._Apis_TestDriving_TestConfiguration_Scenario._Code
+			.format() + " = {0}";
+		String requestNewScenario = ApisRequestManager
+			.getRequest(GET_SCENARIO_KEY_FROM_CODE, "SCAP169");
+		RequestResult scenarioNewResults = scenarioTable.createRequestResult(requestNewScenario);
+		Adaptation scenarioNewResult;
+		try
+		{
+			if ((scenarioNewResult = scenarioNewResults.nextAdaptation()) != null)
+			{
+				Date creatDate = scenarioNewResult
+					.getDate(ApisPaths._Apis_TestDriving_TestConfiguration_Scenario._CreationDate);
+				assertNotNull(creatDate);
+				isScenarioCreated = true;
+				//@Evolution(Ids ="#26222")
+				List<String> scenarioValidVersions = scenarioNewResult.getList(
+					ApisPaths._Apis_TestDriving_TestConfiguration_Scenario._FKValidVersion);
+				assertEquals(2, scenarioValidVersions.size());
+			}
+		}
+		finally
+		{
+			scenarioNewResults.close();
+		}
+		//@Reproduce(Issues = "#21957, 21933)
+		assertTrue(isScenarioCreated);
+		AdaptationTable ioDataContextTable = this.apisDataset
+			.getTable(ApisPaths._Apis_TestDriving_TestData_InputOutputContext.getPathInSchema());
+		AdaptationTable ioDataTable = this.apisDataset
+			.getTable(ApisPaths._Apis_TestDriving_TestData_InputOutputData.getPathInSchema());
+		String request = ApisPaths._Apis_TestDriving_TestData_InputOutputContext._FKCampaignDefinition
+			.format() + " = '272' and "
+			+ ApisPaths._Apis_TestDriving_TestData_InputOutputContext._FKScenario.format()
+			+ " = '66438' and "
+			+ ApisPaths._Apis_TestDriving_TestData_InputOutputContext._FKStep.format()
+			+ " = '610458'";
+		RequestResult ioContextResults = ioDataContextTable.createRequestResult(request);
+		Adaptation ioDataContextNewResult;
+		Integer oidContext = new Integer(0);
+		try
+		{
+			if ((ioDataContextNewResult = ioContextResults.nextAdaptation()) != null)
+			{
+				oidContext = (Integer) ioDataContextNewResult
+					.get(ApisPaths._Apis_TestDriving_TestData_InputOutputContext._Oid);
+			}
+		}
+		finally
+		{
+			ioContextResults.close();
+		}
+		if (oidContext.compareTo(Integer.valueOf(0)) > 0)
+		{
+			String requestIOData = ApisPaths._Apis_TestDriving_TestData_InputOutputData._FKInputOutputContext
+				.format() + " = '" + oidContext.toString() + "'";
+			RequestResult ioDataResults = ioDataTable.createRequestResult(requestIOData);
+			Adaptation ioDataResult;
+			try
+			{
+				if ((ioDataResult = ioDataResults.nextAdaptation()) != null)
+				{
+					Integer order = (Integer) ioDataResult
+						.get(ApisPaths._Apis_TestDriving_TestData_InputOutputData._OrderCtx);
+					if (order.compareTo(Integer.valueOf(1)) == 0)
+					{
+						isCreateOrUpdate = true;
+					}
+				}
+			}
+			finally
+			{
+				ioDataResults.close();
+			}
+			assertTrue(isCreateOrUpdate);
+		}
+
+	}
+	private boolean checkValid(
+		RowIssues testCaseRow,
+		int rowCheck,
+		String ColumnCheck,
+		UserMessage messageCheck)
+	{
+		return testCaseRow.getRowNumber().intValue() == rowCheck
+			&& testCaseRow.getColName().equals(ColumnCheck)
+			&& testCaseRow.getIssueMessage().formatMessage(this.session.getLocale()).equals(
+				messageCheck.formatMessage(this.session.getLocale()));
+	}
+	@Reproduce(Issues = "#21575, #21910")
+	public void testImportFile()
+	{
+		//check fimport file type
+		File sourceFile = new File("./src-tests/resources/archives/apis.ebx");
+		ImportSpreadsheetServiceContext serviceContext = new ImportSpreadsheetServiceContext();
+		serviceContext.setImportSpreadsheetSpec(
+			new ImportSpreadsheetSpec(ImportMode.INSERT_OR_UPDATE, sourceFile));
+		serviceContext.setEntitySelection(new DataSetEntitySelectionImpl(this.apisDataset));
+		ImportSpreadsheetProcedure importTestCaseProcedure = new ImportTestCaseProcedure(
+			serviceContext);
+		ProgrammaticService ps = ProgrammaticService
+			.createForSession(this.session, this.apisDataset.getHome());
+		ProcedureResult pr = ps.execute(importTestCaseProcedure);
+		assertFalse(pr.hasFailed());
+		//@Reproduce(Issues = "#21910")
+		sourceFile = new File("./src-tests/resources/archives/ImportTestCaseTemplate.xls");
+		serviceContext = new ImportSpreadsheetServiceContext();
+		serviceContext.setImportSpreadsheetSpec(
+			new ImportSpreadsheetSpec(ImportMode.INSERT_OR_UPDATE, sourceFile));
+		serviceContext.setEntitySelection(new DataSetEntitySelectionImpl(this.apisDataset));
+		importTestCaseProcedure = new ImportTestCaseProcedure(serviceContext);
+		ps = ProgrammaticService.createForSession(this.session, this.apisDataset.getHome());
+		pr = ps.execute(importTestCaseProcedure);
+		assertNull(pr.getExceptionFullMessage(ApisConstant.DEFAULT_LOCALE));
+		//check import file that has file type changed manually
+		sourceFile = new File(
+			"./src-tests/resources/archives/ImportTestCaseTemplateFormatChangedManually.xls");
+		serviceContext = new ImportSpreadsheetServiceContext();
+		serviceContext.setImportSpreadsheetSpec(
+			new ImportSpreadsheetSpec(ImportMode.INSERT_OR_UPDATE, sourceFile));
+		serviceContext.setEntitySelection(new DataSetEntitySelectionImpl(this.apisDataset));
+		importTestCaseProcedure = new ImportTestCaseProcedure(serviceContext);
+		ps = ProgrammaticService.createForSession(this.session, this.apisDataset.getHome());
+		pr = ps.execute(importTestCaseProcedure);
+		assertNull(pr.getExceptionFullMessage(ApisConstant.DEFAULT_LOCALE));
+		//check import file that miss one sheet
+		sourceFile = new File(
+			"./src-tests/resources/archives/ImportTestCaseTemplateMissingSheet.xls");
+		serviceContext = new ImportSpreadsheetServiceContext();
+		serviceContext.setImportSpreadsheetSpec(
+			new ImportSpreadsheetSpec(ImportMode.INSERT_OR_UPDATE, sourceFile));
+		serviceContext.setEntitySelection(new DataSetEntitySelectionImpl(this.apisDataset));
+		importTestCaseProcedure = new ImportTestCaseProcedure(serviceContext);
+		ps = ProgrammaticService.createForSession(this.session, this.apisDataset.getHome());
+		pr = ps.execute(importTestCaseProcedure);
+		assertNull(pr.getExceptionFullMessage(ApisConstant.DEFAULT_LOCALE));
+		//Check missing column
+		sourceFile = new File("./src-tests/resources/archives/ImportTestCaseWithMissingColunm.xls");
+		serviceContext = new ImportSpreadsheetServiceContext();
+		serviceContext.setImportSpreadsheetSpec(
+			new ImportSpreadsheetSpec(ImportMode.INSERT_OR_UPDATE, sourceFile));
+		serviceContext.setEntitySelection(new DataSetEntitySelectionImpl(this.apisDataset));
+		importTestCaseProcedure = new ImportTestCaseProcedure(serviceContext);
+		ps = ProgrammaticService.createForSession(this.session, this.apisDataset.getHome());
+		pr = ps.execute(importTestCaseProcedure);
+		assertNull(pr.getExceptionFullMessage(ApisConstant.DEFAULT_LOCALE));
+	}
+}
Index: src/com/orchestranetworks/addon/apis/i18n/ApisErrorMessages.java
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/i18n/ApisErrorMessages.java,v
retrieving revision 1.235
diff -u -r1.235 ApisErrorMessages.java
--- src/com/orchestranetworks/addon/apis/i18n/ApisErrorMessages.java	26 Jan 2018 03:40:12 -0000	1.235
+++ src/com/orchestranetworks/addon/apis/i18n/ApisErrorMessages.java	30 Jan 2018 11:23:48 -0000
@@ -1170,6 +1170,24 @@
 		Object[] ps = new Object[0];
 		return new UserMessageRefXML(Severity.ERROR, PService_Export_Roadmap_Do_Not_Select_Option_Error, BASE_NAME, ps, CLASS_LOADER);
 	}
+	public static final String PService_Import_FreeFormCase_Incorrect_Format = "service.import.freeFormCase.incorrect.format";
+	/**
+	 *  [The free form case design uses an incorrect template format or has an issue.]
+	 */
+	public static UserMessageRef get_Service_Import_FreeFormCase_Incorrect_Format()
+	{
+		Object[] ps = new Object[0];
+		return new UserMessageRefXML(Severity.ERROR, PService_Import_FreeFormCase_Incorrect_Format, BASE_NAME, ps, CLASS_LOADER);
+	}
+	public static final String PService_Import_FreeFormCase_Prefix = "service.import.freeFormCase.prefix";
+	/**
+	 *  [Code has to have FF as the prefix.]
+	 */
+	public static UserMessageRef get_Service_Import_FreeFormCase_Prefix()
+	{
+		Object[] ps = new Object[0];
+		return new UserMessageRefXML(Severity.ERROR, PService_Import_FreeFormCase_Prefix, BASE_NAME, ps, CLASS_LOADER);
+	}
 	public static final String PService_Test_Changestatusofignoredscenariostep_NotPermission = "service.test.changestatusofignoredscenariostep.notPermission";
 	/**
 	 *  [The service is not available because scenarios or steps are not ignored.]
Index: src/com/orchestranetworks/addon/apis/i18n/ApisInfoMessages.java
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/i18n/ApisInfoMessages.java,v
retrieving revision 1.227
diff -u -r1.227 ApisInfoMessages.java
--- src/com/orchestranetworks/addon/apis/i18n/ApisInfoMessages.java	29 Jan 2018 09:57:46 -0000	1.227
+++ src/com/orchestranetworks/addon/apis/i18n/ApisInfoMessages.java	30 Jan 2018 11:23:48 -0000
@@ -3264,6 +3264,24 @@
 		Object[] ps = new Object[0];
 		return new UserMessageRefXML(Severity.INFO, PService_Test_IgnoreStep_Label, BASE_NAME, ps, CLASS_LOADER);
 	}
+	public static final String PService_Test_Import_FreeFormCase_Description = "service.test.import.freeFormCase.description";
+	/**
+	 *  [Service to import the check list for monkey test into the Free form case table.]
+	 */
+	public static UserMessageRef get_Service_Test_Import_FreeFormCase_Description()
+	{
+		Object[] ps = new Object[0];
+		return new UserMessageRefXML(Severity.INFO, PService_Test_Import_FreeFormCase_Description, BASE_NAME, ps, CLASS_LOADER);
+	}
+	public static final String PService_Test_Import_FreeFormCase_Label = "service.test.import.freeFormCase.label";
+	/**
+	 *  [Import free form case]
+	 */
+	public static UserMessageRef get_Service_Test_Import_FreeFormCase_Label()
+	{
+		Object[] ps = new Object[0];
+		return new UserMessageRefXML(Severity.INFO, PService_Test_Import_FreeFormCase_Label, BASE_NAME, ps, CLASS_LOADER);
+	}
 	public static final String PService_Test_SetPassAllStep_Confirmation = "service.test.setPassAllStep.confirmation";
 	/**
 	 *  [All the corresponding Detailed test results for Steps within the selected Scenario test report will be set to Pass, and correspondingly, the statuses of this test report will be Pass. Do you want to proceed?]
Index: src/com/orchestranetworks/addon/apis/i18n/apisErrorMessages.mxml
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/i18n/apisErrorMessages.mxml,v
retrieving revision 1.66
diff -u -r1.66 apisErrorMessages.mxml
--- src/com/orchestranetworks/addon/apis/i18n/apisErrorMessages.mxml	26 Jan 2018 03:40:12 -0000	1.66
+++ src/com/orchestranetworks/addon/apis/i18n/apisErrorMessages.mxml	30 Jan 2018 11:23:48 -0000
@@ -131,6 +131,8 @@
 <entry key="service.testReport.assign.email.template.notDefined">Email template is not defined.</entry>
 <entry key="service.testReport.created.same.product.build">You must select those reports that are created from the same product build.</entry>
 <entry key="service.testReport.do.not.select.final.report">In order to run, 'Create/Update final test report', select test reports that are not final reports of the same product build.</entry>
+<entry key="service.import.freeFormCase.incorrect.format">The free form case design uses an incorrect template format or has an issue.</entry>
+<entry key="service.import.freeFormCase.prefix">Code has to have FF as the prefix.</entry>
 <entry key="sprint.start.date.empty.constraint">Start date must not be empty.</entry>
 <entry key="support.to.import.only.xsl.or.xslx.file">You can only import an XLS or XLSX file.</entry>
 <entry key="test.assignment.scenario.not.same.campaign">You can only be assigned test reports from the same campaign execution.</entry>
Index: src/com/orchestranetworks/addon/apis/i18n/apisErrorMessages_fr.mxml
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/i18n/apisErrorMessages_fr.mxml,v
retrieving revision 1.64
diff -u -r1.64 apisErrorMessages_fr.mxml
--- src/com/orchestranetworks/addon/apis/i18n/apisErrorMessages_fr.mxml	26 Jan 2018 03:40:12 -0000	1.64
+++ src/com/orchestranetworks/addon/apis/i18n/apisErrorMessages_fr.mxml	30 Jan 2018 11:23:48 -0000
@@ -131,6 +131,8 @@
 <entry key="service.testReport.assign.email.template.notDefined">Email template is not defined.</entry>
 <entry key="service.testReport.created.same.product.build">You must select those reports that are created from the same product build.</entry>
 <entry key="service.testReport.do.not.select.final.report">In order to run, 'Create/Update final test report', select test reports that are not final reports of the same product build.</entry>
+<entry key="service.import.freeFormCase.incorrect.format">The free form case design uses an incorrect template format or has an issue.</entry>
+<entry key="service.import.freeFormCase.prefix">Code has to have FF as the prefix.</entry>
 <entry key="sprint.start.date.empty.constraint">Start date must not be empty.</entry>
 <entry key="support.to.import.only.xsl.or.xslx.file">You can only import an XLS or XLSX file.</entry>
 <entry key="test.assignment.scenario.not.same.campaign">You can only be assigned test reports from the same campaign execution.</entry>
Index: src/com/orchestranetworks/addon/apis/i18n/apisInfoMessages.mxml
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/i18n/apisInfoMessages.mxml,v
retrieving revision 1.82
diff -u -r1.82 apisInfoMessages.mxml
--- src/com/orchestranetworks/addon/apis/i18n/apisInfoMessages.mxml	29 Jan 2018 09:57:46 -0000	1.82
+++ src/com/orchestranetworks/addon/apis/i18n/apisInfoMessages.mxml	30 Jan 2018 11:23:48 -0000
@@ -328,6 +328,8 @@
 <entry key="service.test.switchStep.toNA.label">Switch step(s) to N/A</entry>
 <entry key="service.test.switchStep.toPass.description">Sets the selected step(s) to Pass.</entry>
 <entry key="service.test.switchStep.toPass.label">Switch step(s) to Pass</entry>
+<entry key="service.test.import.freeFormCase.label">Import free form case</entry>
+<entry key="service.test.import.freeFormCase.description">Service to import the check list for monkey test into the Free form case table.</entry>
 <entry key="switch.to.test.view.service.description">Displays a view showing test scenarios, detailed I/O steps and test reports.</entry>
 <entry key="switch.to.test.view.service.label">Switch to full test view</entry>
 <entry key="table.name">{0} view</entry>
Index: src/com/orchestranetworks/addon/apis/i18n/apisInfoMessages_fr.mxml
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/i18n/apisInfoMessages_fr.mxml,v
retrieving revision 1.79
diff -u -r1.79 apisInfoMessages_fr.mxml
--- src/com/orchestranetworks/addon/apis/i18n/apisInfoMessages_fr.mxml	29 Jan 2018 09:57:46 -0000	1.79
+++ src/com/orchestranetworks/addon/apis/i18n/apisInfoMessages_fr.mxml	30 Jan 2018 11:23:48 -0000
@@ -328,6 +328,8 @@
 <entry key="service.test.switchStep.toNA.label">Switch step(s) to N/A</entry>
 <entry key="service.test.switchStep.toPass.description">Sets the selected step(s) to Pass.</entry>
 <entry key="service.test.switchStep.toPass.label">Switch step(s) to Pass</entry>
+<entry key="service.test.import.freeFormCase.label">Import free form case</entry>
+<entry key="service.test.import.freeFormCase.description">Service to import the check list for monkey test into the Free form case table.</entry>
 <entry key="switch.to.test.view.service.description">Displays a view showing test scenarios, detailed I/O steps and test reports.</entry>
 <entry key="switch.to.test.view.service.label">Switch to full test view</entry>
 <entry key="table.name">{0} view</entry>
Index: src/com/orchestranetworks/addon/apis/module/ApisRegisterAddon.java
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/module/ApisRegisterAddon.java,v
retrieving revision 1.90
diff -u -r1.90 ApisRegisterAddon.java
--- src/com/orchestranetworks/addon/apis/module/ApisRegisterAddon.java	30 Jan 2018 03:41:50 -0000	1.90
+++ src/com/orchestranetworks/addon/apis/module/ApisRegisterAddon.java	30 Jan 2018 11:23:49 -0000
@@ -14,6 +14,7 @@
 import com.orchestranetworks.addon.apis.i18n.*;
 import com.orchestranetworks.addon.apis.services.migration.*;
 import com.orchestranetworks.addon.apis.ui.views.*;
+import com.orchestranetworks.addon.apis.userservice.importtest.importfreeformcase.*;
 import com.orchestranetworks.addon.apis.userservice.importtest.importliteralspecification.*;
 import com.orchestranetworks.addon.apis.userservice.importtest.importtestcase.*;
 import com.orchestranetworks.instance.*;
@@ -27,6 +28,7 @@
 	{
 		context.registerUserService(new ImportTestCaseDeclaration());
 		context.registerUserService(new ImportLiteralSpecificationDeclaration());
+		context.registerUserService(new ImportFreeFormCaseDeclaration());
 	}
 
 	public String getAddonBuildNumber()
Index: src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetProcedure.java
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetProcedure.java,v
retrieving revision 1.4
diff -u -r1.4 ImportSpreadsheetProcedure.java
--- src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetProcedure.java	30 Jan 2018 09:35:47 -0000	1.4
+++ src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetProcedure.java	30 Jan 2018 11:23:49 -0000
@@ -110,6 +110,11 @@
 				ApisPaths._Apis_TestDriving_TestConfiguration_ScenarioLiteral.getPathInSchema());
 			result.initImportedResult(scenarioInLiteralTable);
 			break;
+		case FREE_FORM_CASE:
+			AdaptationTable freeFormCaseTable = this.dataset
+				.getTable(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase.getPathInSchema());
+			result.initImportedResult(freeFormCaseTable);
+			break;
 		default:
 			break;
 		}
Index: src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetResultUI.java
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetResultUI.java,v
retrieving revision 1.4
diff -u -r1.4 ImportSpreadsheetResultUI.java
--- src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetResultUI.java	30 Jan 2018 09:35:47 -0000	1.4
+++ src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetResultUI.java	30 Jan 2018 11:23:49 -0000
@@ -53,9 +53,9 @@
 		}
 	}
 
-	public abstract UserMessageRef getImportFailedMessage();
+	public abstract UserMessage getImportFailedMessage();
 
-	public abstract UserMessageRef getInvalidTemplateMessage();
+	public abstract UserMessage getInvalidTemplateMessage();
 
 	protected UserMessage getSubmitButtonLabel()
 	{
Index: src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetWaitingUI.java
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetWaitingUI.java,v
retrieving revision 1.2
diff -u -r1.2 ImportSpreadsheetWaitingUI.java
--- src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetWaitingUI.java	30 Jan 2018 09:35:47 -0000	1.2
+++ src/com/orchestranetworks/addon/apis/userservice/importtest/ImportSpreadsheetWaitingUI.java	30 Jan 2018 11:23:49 -0000
@@ -3,7 +3,6 @@
  */
 package com.orchestranetworks.addon.apis.userservice.importtest;
 
-import com.orchestranetworks.addon.apis.i18n.*;
 import com.orchestranetworks.addon.apis.userservice.util.ServiceConstants.*;
 import com.orchestranetworks.addon.common.userservice.*;
 import com.orchestranetworks.ui.*;
@@ -26,6 +25,6 @@
 
 	protected UIFormLabelSpec getTitlePage()
 	{
-		return new UIFormLabelSpec(ApisInfoMessages.get_Import_Test_Case());
+		return null;
 	}
 }
Index: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/FreeFormCaseSheetHandler.java
===================================================================
RCS file: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/FreeFormCaseSheetHandler.java
diff -N src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/FreeFormCaseSheetHandler.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/FreeFormCaseSheetHandler.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,464 @@
+/*
+ * Copyright Orchestra Networks 2000-2012. All rights reserved.
+ */
+package com.orchestranetworks.addon.apis.userservice.importtest.importfreeformcase;
+
+import java.text.*;
+import java.util.*;
+
+import com.onwbp.adaptation.*;
+import com.orchestranetworks.addon.apis.bean.*;
+import com.orchestranetworks.addon.apis.binding.*;
+import com.orchestranetworks.addon.apis.cache.*;
+import com.orchestranetworks.addon.apis.common.*;
+import com.orchestranetworks.addon.apis.common.ApisConstant.*;
+import com.orchestranetworks.addon.apis.enumeration.*;
+import com.orchestranetworks.addon.apis.i18n.*;
+import com.orchestranetworks.addon.apis.userservice.importtest.*;
+import com.orchestranetworks.addon.utils.*;
+import com.orchestranetworks.schema.*;
+import com.orchestranetworks.service.*;
+
+/**
+ */
+public final class FreeFormCaseSheetHandler extends ImportSheetHandler
+{
+	private static final String CODE = "Code";
+	private static final String PRODUCT_BUILD = "Product build";
+	private static final String FEATURE = "Feature";
+	private static final String DETAIL_FEATURE = "Detail feature";
+	private static final String LITERAL_CODE = "Literal code";
+	private static final String CAMPAIGN_CODE = "Campaign code";
+	private static final String SCENARIO_CODE = "Scenario code";
+	private static final String STEP_CODE = "Step code";
+	private static final String FREE_FORM_CASE = "Free form case";
+	private static final String TESTER = "Tester";
+	private static final String EXECUTION_DATE = "Execution date";
+	private static final String TEST_RESULT = "Test result";
+	private static final String MANTIS_IDENTIFIER = "Mantis identifier";
+	private static final String NOTE = "Note";
+
+	private final AdaptationTable freeFormCaseTable;
+	private final AdaptationTable stepTable;
+
+	public FreeFormCaseSheetHandler(
+		ProcedureContext pContext,
+		Adaptation dataset,
+		Map<Integer, String> headers,
+		ImportSpreadsheetResult result,
+		ImportMode importMode)
+	{
+		super(pContext, dataset, headers, result, importMode);
+		this.freeFormCaseTable = this.dataset
+			.getTable(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase.getPathInSchema());
+		this.stepTable = this.dataset
+			.getTable(ApisPaths._Apis_TestDriving_TestConfiguration_Step.getPathInSchema());
+	}
+
+	protected SheetName getSheetName()
+	{
+		return SheetName.FREE_FORM_CASE;
+	}
+
+	protected void initHeaderMap()
+	{
+		this.headerPathMapping
+			.put(CODE, ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Code);
+		this.headerPathMapping.put(
+			PRODUCT_BUILD,
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkProductBuild);
+		this.headerPathMapping
+			.put(FEATURE, ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkFeature);
+		this.headerPathMapping.put(
+			DETAIL_FEATURE,
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._DetailFeature);
+		this.headerPathMapping.put(
+			LITERAL_CODE,
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkLiteralSpecification);
+		this.headerPathMapping.put(
+			CAMPAIGN_CODE,
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkCampaignDefinition);
+		this.headerPathMapping
+			.put(SCENARIO_CODE, ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkScenario);
+		this.headerPathMapping
+			.put(STEP_CODE, ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkStep);
+		this.headerPathMapping.put(
+			FREE_FORM_CASE,
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FreeFormCase);
+		this.headerPathMapping
+			.put(TESTER, ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Tester);
+		this.headerPathMapping.put(
+			EXECUTION_DATE,
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._ExecutionDate);
+		this.headerPathMapping
+			.put(TEST_RESULT, ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._TestResult);
+		this.headerPathMapping.put(
+			MANTIS_IDENTIFIER,
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkMantisIdentitier);
+		this.headerPathMapping
+			.put(NOTE, ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Note);
+
+		this.uniqueFields.add(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Code);
+	}
+
+	public void startRow(int inRow)
+	{
+		this.vContext.clear();
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Code,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkProductBuild,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkFeature,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._DetailFeature,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkLiteralSpecification,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkCampaignDefinition,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkScenario,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FreeFormCase,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Tester,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._ExecutionDate,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._TestResult,
+			ApisConstant.EMPTY_STRING);
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkMantisIdentitier,
+			new ArrayList<String>());
+		this.vContext.put(
+			ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Note,
+			ApisConstant.EMPTY_STRING);
+	}
+
+	public void endRow()
+	{
+		try
+		{
+			this.validate();
+			//Check code of Step. If code does not exists, create new record in Step table.
+			String stepCode = (String) this.vContext
+				.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkStep);
+			PrimaryKey stepPKCache = CacheManager.getInstance()
+				.getCacheStepTable()
+				.getPrimaryKey(stepCode);
+			if (stepPKCache != null)
+			{
+				String freeFormCase = (String) this.vContext
+					.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FreeFormCase);
+				Map<Path, Object> valueNodes = new HashMap<Path, Object>();
+				valueNodes.put(ApisPaths._Apis_TestDriving_TestConfiguration_Step._Code, stepCode);
+				valueNodes.put(
+					ApisPaths._Apis_TestDriving_TestConfiguration_Step._Objective,
+					freeFormCase);
+				valueNodes.put(
+					ApisPaths._Apis_TestDriving_TestConfiguration_Step._ShortObj,
+					freeFormCase);
+				this.createOccurrence(valueNodes, this.stepTable, STEP_CODE);
+			}
+			this.createOrUpdateRecord(this.freeFormCaseTable, this.vContext);
+		}
+		catch (ImportSheetException ex)
+		{
+			this.addRowIssues(ex);
+			return;
+		}
+		catch (OperationException ex)
+		{
+			ApisLogger.logException(ex);
+		}
+	}
+
+	protected void validate() throws ImportSheetException
+	{
+		//Free form case table
+		String freeFormCaseCode = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Code);
+		if (AddonStringUtils.isEmpty(freeFormCaseCode))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				CODE);
+		}
+		if (!freeFormCaseCode.startsWith(CODE_PREFIX.FREE_FORM_CASE))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Service_Import_FreeFormCase_Prefix(),
+				CODE);
+		}
+		//Product build table
+		String productBuildLabel = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkProductBuild);
+		if (AddonStringUtils.isEmpty(productBuildLabel))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				PRODUCT_BUILD);
+		}
+		PrimaryKey productBuildPKCache = CacheManager.getInstance()
+			.getCacheProductBuildTable()
+			.getPrimaryKeyByLabel(productBuildLabel);
+		if (productBuildPKCache == null)
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				PRODUCT_BUILD);
+		}
+		//Feature table
+		String featureLabel = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkFeature);
+		if (!AddonStringUtils.isEmpty(featureLabel))
+		{
+			PrimaryKey featurePKCache = CacheManager.getInstance()
+				.getCacheFeatureTableIndex()
+				.getPrimaryKeyByLabel(productBuildLabel);
+			if (featurePKCache == null)
+			{
+				throw new ImportSheetException(
+					ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+					FEATURE);
+			}
+		}
+		//Literal specification table
+		String literalSpecificationCode = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkLiteralSpecification);
+		if (!AddonStringUtils.isEmpty(literalSpecificationCode))
+		{
+			LiteralSpecificationBean literalBean = CacheManager.getInstance()
+				.getCacheLiteralSpecificationTable()
+				.getBean(literalSpecificationCode);
+			if (literalBean == null)
+			{
+				throw new ImportSheetException(
+					ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+					LITERAL_CODE);
+			}
+		}
+		//Campaign definition table
+		String campaignDefinitionCode = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkCampaignDefinition);
+		if (AddonStringUtils.isEmpty(campaignDefinitionCode))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				CAMPAIGN_CODE);
+		}
+		PrimaryKey campaignPKCache = CacheManager.getInstance()
+			.getCacheCampaignTable()
+			.getPrimaryKey(campaignDefinitionCode);
+		if (campaignPKCache == null)
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				CAMPAIGN_CODE);
+		}
+		//Scenario table
+		String scenarioCode = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkScenario);
+		if (AddonStringUtils.isEmpty(scenarioCode))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				SCENARIO_CODE);
+		}
+		PrimaryKey scenarioPKCache = CacheManager.getInstance()
+			.getCacheScenarioTable()
+			.getPrimaryKey(scenarioCode);
+		if (scenarioPKCache == null)
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				SCENARIO_CODE);
+		}
+		//Step table
+		String stepCode = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkStep);
+		if (AddonStringUtils.isEmpty(stepCode))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				STEP_CODE);
+		}
+		if (!stepCode.startsWith(CODE_PREFIX.STEP))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Step_Prefix(),
+				STEP_CODE);
+		}
+		//Tester
+		String tester = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._Tester);
+		if (AddonStringUtils.isEmpty(tester))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Step_Prefix(),
+				TESTER);
+		}
+		Role testerSpecificRole = Profile.forSpecificRole(tester);
+		if (testerSpecificRole == null)
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Step_Prefix(),
+				TESTER);
+		}
+		//Date
+		String executionDate = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._ExecutionDate);
+		if (AddonStringUtils.isEmpty(executionDate))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				EXECUTION_DATE);
+		}
+		SimpleDateFormat format = new SimpleDateFormat(
+			DATE_FORMATS.DEFAULT_DATE_FORMAT_FOR_READ,
+			Locale.US);
+		try
+		{
+			format.parse(executionDate);
+		}
+		catch (ParseException ex)
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				EXECUTION_DATE);
+		}
+		//Test result
+		String testResult = (String) this.vContext
+			.get(ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._TestResult);
+		if (AddonStringUtils.isEmpty(testResult))
+		{
+			throw new ImportSheetException(
+				ApisErrorMessages.get_Test_Configuration_Import_Testcase_Design_Empty(),
+				TEST_RESULT);
+		}
+	}
+
+	protected Object normalizeValue(int inRow, int inCol, String header, String inValue)
+		throws ImportSheetException
+	{
+		if (MANTIS_IDENTIFIER.equals(header))
+		{
+			String inValueWithoutCommaCharacter = inValue.trim()
+				.replaceAll(",", ApisConstant.CARRIAGE_RETURN_CHARACTER);
+			return this.getIdValues(inValueWithoutCommaCharacter, MANTIS_IDENTIFIER);
+		}
+		if (EXECUTION_DATE.equals(header))
+		{
+			SimpleDateFormat format = new SimpleDateFormat("mm/dd/yyyy");
+			try
+			{
+				return format.parse(inValue);
+			}
+			catch (ParseException ex)
+			{
+				return null;
+			}
+		}
+		if (PRODUCT_BUILD.equals(header) && !AddonStringUtils.isEmpty(inValue))
+		{
+			return CacheManager.getInstance()
+				.getCacheProductBuildTable()
+				.getPrimaryKeyByLabel(inValue);
+		}
+		SchemaNode node = this.freeFormCaseTable.getTableOccurrenceRootNode()
+			.getNode(this.headerPathMapping.get(header));
+		return node.parseXsString(inValue);
+	}
+
+	public void processCell(int inRow, int inCol, String header, String inValue)
+	{
+		//set row number
+		this.rowNumber = Integer.valueOf(inRow + 1);
+
+		if (FEATURE.equals(header))
+		{
+			PrimaryKey featurePK = CacheManager.getInstance()
+				.getCacheFeatureTableIndex()
+				.getPrimaryKeyByLabel(inValue);
+			if (featurePK == null)
+			{
+				return;
+			}
+			this.vContext.put(
+				ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkFeature,
+				featurePK.format());
+			return;
+		}
+
+		if (PRODUCT_BUILD.equals(header))
+		{
+			PrimaryKey productBuildPK = CacheManager.getInstance()
+				.getCacheProductBuildTable()
+				.getPrimaryKeyByLabel(inValue);
+			if (productBuildPK == null)
+			{
+				return;
+			}
+			this.vContext.put(
+				ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkProductBuild,
+				productBuildPK.format());
+			return;
+		}
+		if (CAMPAIGN_CODE.equals(header))
+		{
+			PrimaryKey campaignDefinitionPK = CacheManager.getInstance()
+				.getCacheCampaignTable()
+				.getPrimaryKey(inValue);
+			if (campaignDefinitionPK == null)
+			{
+				return;
+			}
+			this.vContext.put(
+				ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkCampaignDefinition,
+				campaignDefinitionPK.format());
+			return;
+		}
+
+		if (SCENARIO_CODE.equals(header))
+		{
+			PrimaryKey scenarioPK = CacheManager.getInstance()
+				.getCacheScenarioTable()
+				.getPrimaryKey(inValue);
+			if (scenarioPK == null)
+			{
+				return;
+			}
+			this.vContext.put(
+				ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkScenario,
+				scenarioPK.format());
+			return;
+		}
+		if (STEP_CODE.equals(header))
+		{
+			PrimaryKey stepPK = CacheManager.getInstance()
+				.getCacheStepTable()
+				.getPrimaryKey(inValue);
+			if (stepPK == null)
+			{
+				return;
+			}
+			this.vContext.put(
+				ApisPaths._Apis_TestDriving_TestExecution_FreeFormCase._FkScenario,
+				stepPK.format());
+			return;
+		}
+
+		super.processCell(inRow, inCol, header, inValue);
+	}
+
+}
Index: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseDeclaration.java
===================================================================
RCS file: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseDeclaration.java
diff -N src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseDeclaration.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseDeclaration.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,57 @@
+/*
+ * Copyright Orchestra Networks 2000-2012. All rights reserved.
+ */
+package com.orchestranetworks.addon.apis.userservice.importtest.importfreeformcase;
+
+import com.orchestranetworks.addon.apis.common.ApisConstant.*;
+import com.orchestranetworks.addon.apis.i18n.*;
+import com.orchestranetworks.addon.apis.userservice.permission.*;
+import com.orchestranetworks.addon.apis.userservice.util.ServiceConstants.*;
+import com.orchestranetworks.schema.types.dataset.DatasetSet.*;
+import com.orchestranetworks.service.*;
+import com.orchestranetworks.ui.selection.*;
+import com.orchestranetworks.userservice.*;
+import com.orchestranetworks.userservice.declaration.*;
+import com.orchestranetworks.userservice.permission.*;
+
+/**
+ */
+public final class ImportFreeFormCaseDeclaration implements UserServiceDeclaration.OnDataset
+{
+
+	public UserService<DatasetEntitySelection> createUserService()
+	{
+		return new ImportFreeFormCaseService();
+	}
+
+	public void declareWebComponent(WebComponentDeclarationContext context)
+	{
+		context.setAvailableAsPerspectiveAction(true);
+	}
+
+	public void defineActivation(ActivationContextOnDataset context)
+	{
+		context.includeDatasetsMatching(DATASET_NAMES.APIS, DatasetChildrenPolicy.NONE);
+		context.setPermissionRule(new ServicePermissionRule<DatasetEntitySelection>()
+		{
+			public UserServicePermission getPermission(
+				ServicePermissionRuleContext<DatasetEntitySelection> servicePermissionContext)
+			{
+				return UserServicePermissionUtil.getInstance()
+					.getTesterServicePermission(servicePermissionContext.getSession());
+			}
+		});
+	}
+
+	public void defineProperties(UserServicePropertiesDefinitionContext context)
+	{
+		context.setLabel(ApisInfoMessages.get_Service_Test_Import_FreeFormCase_Label());
+		context.setDescription(ApisInfoMessages.get_Service_Test_Import_FreeFormCase_Description());
+	}
+
+	public ServiceKey getServiceKey()
+	{
+		return ImportSpreadsheet.IMPORT_FREE_FORM_CASE_SERVICE_KEY_MODULE;
+	}
+
+}
Index: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseProcedure.java
===================================================================
RCS file: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseProcedure.java
diff -N src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseProcedure.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseProcedure.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,47 @@
+/*
+ * Copyright Orchestra Networks 2000-2012. All rights reserved.
+ */
+package com.orchestranetworks.addon.apis.userservice.importtest.importfreeformcase;
+
+import java.util.*;
+
+import com.onwbp.base.text.*;
+import com.orchestranetworks.addon.apis.enumeration.*;
+import com.orchestranetworks.addon.apis.i18n.*;
+import com.orchestranetworks.addon.apis.userservice.importtest.*;
+
+/**
+ */
+public final class ImportFreeFormCaseProcedure extends ImportSpreadsheetProcedure
+{
+
+	public ImportFreeFormCaseProcedure(ImportSpreadsheetServiceContext serviceContext)
+	{
+		super(serviceContext);
+	}
+
+	protected List<SheetName> getValidSheetNames()
+	{
+		return Arrays.asList(SheetName.FREE_FORM_CASE);
+	}
+
+	protected UserMessage getInvalidTemplateMessage()
+	{
+		return ApisErrorMessages.get_Service_Import_FreeFormCase_Incorrect_Format();
+	}
+
+	protected ImportSheetHandler getImportSheetHandler(SheetName sheetName)
+	{
+		if (sheetName.equals(SheetName.FREE_FORM_CASE))
+		{
+			return new FreeFormCaseSheetHandler(
+				this.pContext,
+				this.dataset,
+				this.headers,
+				this.serviceContext.getResult(),
+				this.serviceContext.getImportSpreadsheetSpec().getImportMode());
+		}
+		return null;
+	}
+
+}
Index: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseResultUI.java
===================================================================
RCS file: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseResultUI.java
diff -N src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseResultUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseResultUI.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,31 @@
+/*
+ * Copyright Orchestra Networks 2000-2012. All rights reserved.
+ */
+package com.orchestranetworks.addon.apis.userservice.importtest.importfreeformcase;
+
+import com.onwbp.base.text.*;
+import com.orchestranetworks.addon.apis.i18n.*;
+import com.orchestranetworks.addon.apis.userservice.importtest.*;
+import com.orchestranetworks.ui.*;
+
+/**
+ */
+public final class ImportFreeFormCaseResultUI extends ImportSpreadsheetResultUI
+{
+
+	public UserMessage getImportFailedMessage()
+	{
+		return ApisErrorMessages.get_Service_Import_FreeFormCase_Incorrect_Format();
+	}
+
+	public UserMessage getInvalidTemplateMessage()
+	{
+		return ApisErrorMessages.get_Service_Import_FreeFormCase_Incorrect_Format();
+	}
+
+	protected UIFormLabelSpec getTitlePage()
+	{
+		return new UIFormLabelSpec(ApisInfoMessages.get_Service_Test_Import_FreeFormCase_Label());
+	}
+
+}
Index: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseService.java
===================================================================
RCS file: src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseService.java
diff -N src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseService.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/com/orchestranetworks/addon/apis/userservice/importtest/importfreeformcase/ImportFreeFormCaseService.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,47 @@
+/*
+ * Copyright Orchestra Networks 2000-2012. All rights reserved.
+ */
+package com.orchestranetworks.addon.apis.userservice.importtest.importfreeformcase;
+
+import java.util.*;
+
+import com.onwbp.base.text.*;
+import com.orchestranetworks.addon.apis.common.*;
+import com.orchestranetworks.addon.apis.i18n.*;
+import com.orchestranetworks.addon.apis.userservice.importtest.*;
+import com.orchestranetworks.service.*;
+
+/**
+ */
+public final class ImportFreeFormCaseService extends ImportSpreadsheetService
+{
+
+	public static final int NUMBER_SHEET_IMPORT_FREE_FORM_CASE = 1;
+
+	protected int estimateCounter() throws Exception
+	{
+		return NUMBER_SHEET_IMPORT_FREE_FORM_CASE;
+	}
+
+	protected List<Procedure> getProcedures()
+	{
+		Procedure procedure = new ImportFreeFormCaseProcedure(this.serviceContext);
+		return Arrays.asList(procedure);
+	}
+
+	protected String getImportTemplateName()
+	{
+		return ApisConstant.TEMPLATE_NAME.IMPORT_FREE_FORM_CASE_TEMPLATE;
+	}
+
+	protected UserMessage getTitlePage()
+	{
+		return ApisInfoMessages.get_Service_Test_Import_FreeFormCase_Label();
+	}
+
+	protected ImportSpreadsheetResultUI getImportResultUI()
+	{
+		return new ImportFreeFormCaseResultUI();
+	}
+
+}
Index: src/com/orchestranetworks/addon/apis/userservice/util/ServiceConstants.java
===================================================================
RCS file: /home/cvs/addon-apis/src/com/orchestranetworks/addon/apis/userservice/util/ServiceConstants.java,v
retrieving revision 1.39
diff -u -r1.39 ServiceConstants.java
--- src/com/orchestranetworks/addon/apis/userservice/util/ServiceConstants.java	30 Jan 2018 09:35:53 -0000	1.39
+++ src/com/orchestranetworks/addon/apis/userservice/util/ServiceConstants.java	30 Jan 2018 11:23:50 -0000
@@ -24,6 +24,10 @@
 		public static final ServiceKey IMPORT_LITERAL_SPECIFICATION_SERVICE_KEY_MODULE = ServiceKey
 			.forModuleServiceName(MODULE_NAME, "importLiteralSpecification");
 
+		//service key for import free form case service
+		public static final ServiceKey IMPORT_FREE_FORM_CASE_SERVICE_KEY_MODULE = ServiceKey
+			.forModuleServiceName(MODULE_NAME, "importFreeFormCaseServiceKey");
+
 		public static final ObjectKey _ImportSpreadsheetObj = ObjectKey.forName("importObj");
 		public static final Path _FileUpload = Path.parse("fileUpload");
 		public static final Path _ImportMode = Path.parse("importMode");
@@ -545,7 +549,8 @@
 
 	public interface CreateEBXVersion
 	{
-		public static final ServiceKey CREATE_EBX_VERSION_KEY = ServiceKey.forName("createEBXVersion");
+		public static final ServiceKey CREATE_EBX_VERSION_KEY = ServiceKey
+			.forName("createEBXVersion");
 		public static final ObjectKey OBJECT_KEY = ObjectKey.forName("EBXObj");
 		public static final Path _Product = Path.parse("product");
 		public static final Path _Version = Path.parse("version");
